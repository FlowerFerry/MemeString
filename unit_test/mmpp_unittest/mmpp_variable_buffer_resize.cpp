
#include <catch2/catch.hpp>

#include <memepp/variable_buffer.hpp>

TEST_CASE("memepp::string - 09", "variable_buffer resize")
{
	memepp::variable_buffer b01;

	b01.resize(0);
	REQUIRE(sizeof(memepp::variable_buffer) == MMSTR__OBJ_SIZE);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::small);
	REQUIRE(b01.size() == 0);
	REQUIRE(b01.empty());
	REQUIRE(b01.capacity() == MMSTR__OBJ_SIZE - 2);
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);

	b01.resize(MMSTR__OBJ_SIZE - 2, 1);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::small);
	REQUIRE(b01.size() == MMSTR__OBJ_SIZE - 2);

	uint8_t buf01[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
	REQUIRE(0 == memcmp(b01.data(), buf01, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(10);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::small);
	REQUIRE(b01.size() == 10);

	uint8_t buf02[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
	REQUIRE(0 == memcmp(b01.data(), buf02, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(20, 2);
#if INTPTR_MAX == INT64_MAX
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::small);
#else
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
#endif
	REQUIRE(b01.size() == 20);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

	uint8_t buf03[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 };
	REQUIRE(0 == memcmp(b01.data(), buf03, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(10, 2);
#if INTPTR_MAX == INT64_MAX
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::small);
#else
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
#endif
	REQUIRE(b01.size() == 10);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

	uint8_t buf04[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
	REQUIRE(0 == memcmp(b01.data(), buf04, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(23, 3);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 23);
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

	uint8_t buf05[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 };
	REQUIRE(0 == memcmp(b01.data(), buf05, b01.size()));


	b01.resize(42, 4);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 42);
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

	uint8_t buf06[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 };
	REQUIRE(0 == memcmp(b01.data(), buf06, b01.size()));


	b01.resize(128, 5);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 128);
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

	uint8_t buf07[] = {
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
		0x05, 0x05
	};
	REQUIRE(0 == memcmp(b01.data(), buf07, b01.size()));


	b01.resize(1, 6);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 1);
	uint8_t buf08[] = { 0x01 };
	REQUIRE(0 == memcmp(b01.data(), buf08, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(256, 7);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 256);
	uint8_t buf09[] = {
		0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07
	};
	REQUIRE(0 == memcmp(b01.data(), buf09, b01.size()));
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);


	b01.resize(65536, 8);
	REQUIRE(b01.storage_type() == memepp::buffer_storage_t::medium);
	REQUIRE(b01.size() == 65536);
	REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b01.native_handle())) == 1);
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b01.native_handle())) == 1);

    memepp::variable_buffer b02;
    b02.resize_and_overwrite(256);
    REQUIRE(b02.storage_type() == memepp::buffer_storage_t::medium);
    REQUIRE(b02.size() == 256);
	uint8_t buf10[256] = { 0 };
    //REQUIRE(0 != memcmp(b02.data(), buf10, b02.size()));
    REQUIRE(MemeVariableBuffer_capacityCorrectness(memepp::to_pointer(b02.native_handle())) == 1);
    REQUIRE(MemeString_checkHeadTailMemory(
        (MemeString_Const_t)memepp::to_pointer(b02.native_handle())) == 1);
	
	uint8_t buf11[16] = { 
        0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F
	};

    memcpy(b02.data(), buf11, 16);
    REQUIRE(0 == memcmp(b02.data(), buf11, 16));
	REQUIRE(MemeString_checkHeadTailMemory(
		(MemeString_Const_t)memepp::to_pointer(b02.native_handle())) == 1);
}
